// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Starter {
  id String @id @default(cuid())

  text String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  match   Match  @relation(fields: [matchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  matchId String

  // non-unique foreign key
  @@index([matchId])
}

model Match {
  id          String  @id @default(cuid())
  username    String? @unique
  description String?
  gender      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  images MatchImage[]

  chats    Chat[]
  starters Starter[]

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String
}

model MatchImage {
  id          String @id @default(cuid())
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  match   Match  @relation(fields: [matchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  matchId String

  // non-unique foreign key
  @@index([matchId])
}

model User {
  id        String @id @default(cuid())
  email     String @unique
  firstName String
  lastName  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image       UserImage?
  password    Password?
  matches     Match[]
  roles       Role[]
  sessions    Session[]
  connections Connection[]
}

model Chat {
  id      String  @id @default(cuid())
  title   String
  content String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  match   Match  @relation(fields: [matchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  matchId String

  images ChatImage[]

  // non-unique foreign key
  @@index([matchId])
  // This helps our order by in the user search a LOT
  @@index([matchId, updatedAt])
}

model ChatImage {
  id          String @id @default(cuid())
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chatId String

  // non-unique foreign key
  @@index([chatId])
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}
